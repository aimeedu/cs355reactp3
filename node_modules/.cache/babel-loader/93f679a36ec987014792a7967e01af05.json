{"ast":null,"code":"var _jsxFileName = \"/Users/aimeedu/WebstormProjects/cs355reactp3/src/components/Download.js\";\nimport React, { Component } from 'react';\nimport './Components.css';\n\nclass Download extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.selectAll = () => {\n      const results = document.getElementsByClassName(\"checkbox\");\n\n      for (let i = 0; i < results.length; i++) {\n        results[i].checked = true;\n      }\n\n      for (let i = 0; i < this.props.data.length; i++) {\n        this.props.data[i].isChecked = true;\n      }\n    };\n\n    this.deselectAll = () => {\n      const results = document.getElementsByClassName(\"checkbox\");\n\n      for (let i = 0; i < results.length; i++) {\n        results[i].checked = false;\n      }\n\n      for (let i = 0; i < this.props.data.length; i++) {\n        this.props.data[i].isChecked = false;\n      }\n    };\n\n    this.trimData = data => {\n      // copy the object array.\n      const arr = [...this.props.data];\n      let newArr = [];\n\n      for (let i = 0; i < arr.length; i++) {\n        if (arr[i].isChecked) {\n          newArr.push({\n            title: arr[i].title.trim(),\n            url: arr[i].url.trim(),\n            description: arr[i].description.trim()\n          });\n        }\n      }\n\n      return newArr;\n    };\n\n    this.tocsv = data => {\n      const csvRows = []; //get the headers\n\n      if (data.length !== 0) {\n        const headers = Object.keys(data[0]);\n        csvRows.push(headers.join(','));\n\n        for (const row of data) {\n          const values = headers.map(header => {\n            const escaped = ('' + row[header]).replace(/\"/g, '\\\\\"');\n            return \"\\\"\".concat(escaped, \"\\\"\");\n          });\n          csvRows.push(values.join(','));\n        }\n\n        return csvRows.join('\\n');\n      } else {\n        return csvRows;\n      }\n    };\n\n    this.toxml = data => {\n      let result = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<results>\\n\";\n\n      for (let i = 0; i < data.length; i++) {\n        let title = data[i].title;\n        let url = data[i].url;\n        let description = data[i].description;\n        result = result + \"  <result>\\n    <title>\" + title + \"</title>\\n\" + \"    <url>\" + url + \"</url>\\n\" + \"    <description>\" + description + \"</description>\\n  </result>\\n\";\n      }\n\n      result += \"</results>\";\n      return result;\n    };\n\n    this.download = (data, fileName, type) => {\n      const file = new Blob([data], {\n        type: type\n      });\n      const a = document.createElement('a');\n      a.href = window.URL.createObjectURL(file);\n      a.download = fileName;\n      a.click();\n    };\n\n    this.downloadFile = e => {\n      e.preventDefault();\n      const input = e.target.elements.input.value;\n      const fileType = e.target.elements.options.value;\n      const fileName = input + fileType;\n      const trim = this.trimData(this.props.data); // the data has already been stored in states in parent class, retrieve the data from this.props.data\n\n      if (fileType === \".csv\") {\n        const data = this.tocsv(trim);\n        this.download(data, fileName, \"text/csv\");\n      } else if (fileType === \".json\") {\n        const data = JSON.stringify(trim); // const data = this.tojson(this.props.data);\n\n        this.download(data, fileName, \"application/json\");\n      } else {\n        const data = this.toxml(trim);\n        this.download(data, fileName, \"text/xml\");\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"downloadFile\",\n      onSubmit: this.downloadFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"selector\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"selectall\",\n      className: \"btn btn-light purple-btn mr-sm-1\",\n      type: \"button\",\n      onClick: this.selectAll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Select All\"), React.createElement(\"button\", {\n      id: \"deselectall\",\n      className: \"btn btn-light purple-btn\",\n      type: \"button\",\n      onClick: this.deselectAll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Deselect All\")), React.createElement(\"button\", {\n      id: \"download\",\n      className: \"btn btn-light mr-sm-1\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Download\"), React.createElement(\"input\", {\n      id: \"fileName\",\n      className: \"form-control mr-sm-1\",\n      type: \"text\",\n      placeholder: \"File Name\",\n      name: \"input\",\n      required: \"required\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(\"select\", {\n      name: \"options\",\n      id: \"fileType\",\n      className: \"custom-select\",\n      required: \"required\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \".json\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \".JSON\"), React.createElement(\"option\", {\n      value: \".csv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \".CSV\"), React.createElement(\"option\", {\n      value: \".xml\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \".XML\"))));\n  }\n\n}\n\nexport default Download;","map":{"version":3,"sources":["/Users/aimeedu/WebstormProjects/cs355reactp3/src/components/Download.js"],"names":["React","Component","Download","selectAll","results","document","getElementsByClassName","i","length","checked","props","data","isChecked","deselectAll","trimData","arr","newArr","push","title","trim","url","description","tocsv","csvRows","headers","Object","keys","join","row","values","map","header","escaped","replace","toxml","result","download","fileName","type","file","Blob","a","createElement","href","window","URL","createObjectURL","click","downloadFile","e","preventDefault","input","target","elements","value","fileType","options","JSON","stringify","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './Components.css';\n\nclass Download extends Component {\n\n    // constructor(props){\n    //     super(props);\n    // }\n\n    selectAll = () => {\n        const results = document.getElementsByClassName(\"checkbox\");\n        for (let i = 0; i < results.length; i++) {\n            results[i].checked = true;\n        }\n        for (let i = 0; i< this.props.data.length; i++) {\n            this.props.data[i].isChecked = true;\n        }\n    }\n\n    deselectAll = () => {\n        const results = document.getElementsByClassName(\"checkbox\");\n        for (let i = 0; i < results.length; i++) {\n            results[i].checked = false;\n        }\n        for (let i = 0; i< this.props.data.length; i++) {\n            this.props.data[i].isChecked = false;\n        }\n    }\n\n    trimData = (data) => {\n        // copy the object array.\n        const arr = [...this.props.data];\n        let newArr = [];\n        for (let i = 0; i< arr.length; i++) {\n            if(arr[i].isChecked) {\n                newArr.push({\n                    title:arr[i].title.trim(),\n                    url:arr[i].url.trim(),\n                    description:arr[i].description.trim(),\n                });\n            }}\n        return newArr;\n    }\n\n    tocsv = (data) => {\n        const csvRows = [];\n        //get the headers\n        if (data.length !== 0){\n            const headers = Object.keys(data[0]);\n            csvRows.push(headers.join(','));\n\n            for (const row of data) {\n                const values = headers.map(header => {\n                    const escaped = (''+row[header]).replace(/\"/g, '\\\\\"');\n                    return `\"${escaped}\"`;\n                })\n                csvRows.push(values.join(','));\n            }\n            return csvRows.join('\\n');\n        }else{\n            return csvRows;\n        }\n    }\n\n    // toxml = (data) => {\n    //     let result = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<results>\\n\";\n    //     /* */\n    //     for(let i = 0; i<data.length; i++) {\n    //         if (data[i].isChecked) {\n    //             let title = data[i].title.trim();\n    //             let url = data[i].url.trim();\n    //             let description = data[i].description.trim();\n    //             result = result + \"<result>\\n<title>\" + title + \"</title>\\n\" +\n    //                 \"<url>\" + url + \"</url>\\n\" + \"<description>\" +\n    //                 description + \"</description>\\n</result>\\n\";\n    //         }\n    //     }\n    //     result += \"</results>\";\n    //     return result.trim();\n    // };\n\n    toxml = (data) => {\n        let result = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<results>\\n\";\n        for(let i = 0; i<data.length; i++) {\n\n                let title = data[i].title;\n                let url = data[i].url;\n                let description = data[i].description;\n                result = result + \"  <result>\\n    <title>\" + title + \"</title>\\n\" +\n                    \"    <url>\" + url + \"</url>\\n\" + \"    <description>\" +\n                    description + \"</description>\\n  </result>\\n\";\n\n        }\n        result += \"</results>\";\n        return result;\n    }\n\n    download = (data, fileName, type) => {\n        const file = new Blob([data], {type: type});\n        const a = document.createElement('a');\n        a.href = window.URL.createObjectURL(file);\n        a.download = fileName;\n        a.click();\n    }\n\n    downloadFile = (e) => {\n        e.preventDefault();\n        const input = e.target.elements.input.value;\n        const fileType = e.target.elements.options.value;\n        const fileName = input + fileType;\n        const trim = this.trimData(this.props.data);\n\n        // the data has already been stored in states in parent class, retrieve the data from this.props.data\n        if (fileType === \".csv\") {\n            const data = this.tocsv(trim);\n            this.download(data, fileName, \"text/csv\");\n        }\n        else if (fileType === \".json\") {\n            const data = JSON.stringify(trim);\n            // const data = this.tojson(this.props.data);\n            this.download(data, fileName, \"application/json\");\n        }else{\n            const data = this.toxml(trim);\n            this.download(data, fileName, \"text/xml\");\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <form className=\"downloadFile\" onSubmit={this.downloadFile}>\n                    <div id=\"selector\">\n                        <button id=\"selectall\" className=\"btn btn-light purple-btn mr-sm-1\" type=\"button\" onClick={this.selectAll}>Select All</button>\n                        <button id=\"deselectall\" className=\"btn btn-light purple-btn\" type=\"button\" onClick={this.deselectAll}>Deselect All</button>\n                    </div>\n                        <button id=\"download\" className=\"btn btn-light mr-sm-1\" type=\"submit\">Download</button>\n                        <input id=\"fileName\" className=\"form-control mr-sm-1\" type=\"text\" placeholder=\"File Name\" name=\"input\" required=\"required\"/>\n                        <select name=\"options\" id=\"fileType\" className=\"custom-select\" required=\"required\">\n                            <option value=\".json\">.JSON</option>\n                            <option value=\".csv\">.CSV</option>\n                            <option value=\".xml\">.XML</option>\n                        </select>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Download;"]},"metadata":{},"sourceType":"module"}