{"ast":null,"code":"var _jsxFileName = \"/Users/aimeedu/WebstormProjects/cs355reactp3/src/components/Admin.js\";\nimport React, { Component } from 'react';\nimport './Admin.css';\nimport { Button, Form, FormControl } from \"react-bootstrap\";\nimport axios from 'axios';\n\nclass Admin extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchHistories = async () => {\n      /** when we use postgresql this code works\n      const res = await fetch('/admin');\n      const results = await res.json();\n      this.setState({\n          results\n      }) */\n      // below is for mongodb get search result.\n      axios.get('http://localhost:5000/custom').then(res => {\n        this.setState({\n          results: res.data\n        });\n        console.log(res.data);\n      });\n    };\n\n    this.indexing = e => {\n      e.preventDefault(); // get the user input url\n\n      const inputURL = e.target.elements.userInput.value;\n      console.log(inputURL); //pass this url to the post function.\n\n      axios.post('/admin', {\n        inputURL\n      }).then(res => {\n        console.log(res.data);\n        console.log('Indexing Successfully! Data inserted in DB!');\n      });\n      this.setState({\n        isIndexed: true,\n        count: this.state.count + 1\n      }); //     const request = new Request('http://localhost:3000/admin', {\n      //         method: 'POST',\n      //         headers: new Headers({'Content-Type': 'application/json'}),\n      //         body: inputURL\n      //     })\n      //     // //xmlhttprequest\n      //     fetch(request)\n      //         .then((res) => {\n      //             res.json()\n      //                 .then((data)=>{\n      //                     console.log(data)\n      //                 })\n      //         })\n    };\n\n    this.state = {\n      results: [],\n      isIndexed: false,\n      count: 0\n    };\n  } // make AJAX calls, query the data from the search table. http://localhost:3000 or 5000/admin, both working\n  // as soon as you click on fetch data button, the table will show.\n\n\n  render() {\n    const rows = this.state.results.map((result, i) => {\n      return React.createElement(\"tr\", {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, result.searchid), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, result.term), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, result.count), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, result.searchdate));\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Indexing Launcher\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, this.state.isIndexed ? \"Data inserted into DB! Indexing Count: \".concat(this.state.count) : null), React.createElement(Form, {\n      className: \"search\",\n      onSubmit: this.indexing,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      className: \"mr-sm-1 searchBar\",\n      type: \"url\",\n      placeholder: \"Type a URL to be indexed.\",\n      name: \"userInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(Button, {\n      id: \"searchBtn\",\n      variant: \"btn btn-light purple-btn\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Search\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"User Search Histories \", React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-outline-light\",\n      onClick: this.fetchHistories,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Fetch Data\")), React.createElement(\"table\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Search ID\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Terms\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Number of search results\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Searching Time\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, rows)), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Admin;","map":{"version":3,"sources":["/Users/aimeedu/WebstormProjects/cs355reactp3/src/components/Admin.js"],"names":["React","Component","Button","Form","FormControl","axios","Admin","constructor","props","fetchHistories","get","then","res","setState","results","data","console","log","indexing","e","preventDefault","inputURL","target","elements","userInput","value","post","isIndexed","count","state","render","rows","map","result","i","searchid","term","searchdate"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './Admin.css';\nimport {Button, Form, FormControl} from \"react-bootstrap\";\nimport axios from 'axios';\n\n\nclass Admin extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            results:[],\n            isIndexed: false,\n            count:0\n        }\n    }\n\n    // make AJAX calls, query the data from the search table. http://localhost:3000 or 5000/admin, both working\n    // as soon as you click on fetch data button, the table will show.\n    fetchHistories = async () => {\n        /** when we use postgresql this code works\n        const res = await fetch('/admin');\n        const results = await res.json();\n        this.setState({\n            results\n        }) */\n        // below is for mongodb get search result.\n        axios.get('http://localhost:5000/custom')\n            .then(res => {\n                this.setState({\n                    results: res.data\n                })\n                console.log(res.data);\n            })\n    }\n\n    indexing = (e) => {\n        e.preventDefault();\n        // get the user input url\n        const inputURL = e.target.elements.userInput.value;\n        console.log(inputURL);\n\n        //pass this url to the post function.\n        axios.post('/admin', {inputURL})\n            .then((res)=>{\n                console.log(res.data);\n                console.log('Indexing Successfully! Data inserted in DB!');\n            })\n        this.setState({\n            isIndexed: true,\n            count: this.state.count+1\n        })\n\n    //     const request = new Request('http://localhost:3000/admin', {\n    //         method: 'POST',\n    //         headers: new Headers({'Content-Type': 'application/json'}),\n    //         body: inputURL\n    //     })\n    //     // //xmlhttprequest\n    //     fetch(request)\n    //         .then((res) => {\n    //             res.json()\n    //                 .then((data)=>{\n    //                     console.log(data)\n    //                 })\n    //         })\n    }\n\n    render() {\n\n        const rows = this.state.results.map((result, i) => {\n            return(\n                <tr key={i}>\n                    <td>{result.searchid}</td>\n                    <td>{result.term}</td>\n                    <td>{result.count}</td>\n                    <td>{result.searchdate}</td>\n                </tr>\n            )\n        })\n\n        return (\n            <div>\n                <h2>Indexing Launcher</h2>\n                <h3>{this.state.isIndexed?`Data inserted into DB! Indexing Count: ${this.state.count}`:null}</h3>\n                <Form className=\"search\" onSubmit={this.indexing}>\n                    <FormControl className=\"mr-sm-1 searchBar\" type=\"url\" placeholder=\"Type a URL to be indexed.\" name=\"userInput\"/>\n                    <Button id=\"searchBtn\" variant=\"btn btn-light purple-btn\" type=\"submit\">Search</Button>\n                </Form>\n\n\n                <br/><br/>\n\n                   <h3>User Search Histories <button type=\"button\" className=\"btn btn-outline-light\" onClick={this.fetchHistories}>Fetch Data</button>\n                   </h3>\n\n                <table className=\"\">\n                    <thead>\n                        <tr>\n                            <th>Search ID</th>\n                            <th>Terms</th>\n                            <th>Number of search results</th>\n                            <th>Searching Time</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    {rows}\n                    </tbody>\n                </table>\n                <br/>\n            </div>\n        );\n    }\n}\n\nexport default Admin;"]},"metadata":{},"sourceType":"module"}