{"ast":null,"code":"var _jsxFileName = \"/Users/aimeedu/WebstormProjects/cs355reactp3/src/components/FileInput.js\";\nimport React from 'react';\nimport Download from \"./Download\";\nimport './Components.css';\n\nclass FileInput extends React.Component {\n  constructor(props) {\n    super(props); // this.fileInput = React.createRef();\n\n    this.delete = event => {\n      const index = event.target.dataset.index;\n      this.setState(state => {\n        const data = [...state.data];\n        data.splice(index, 1);\n        return {\n          data: data\n        };\n      });\n    };\n\n    this.checkBox = event => {\n      const index = event.target.dataset.index;\n      this.setState(state => {\n        const data = [...state.data];\n        const object = state.data[index];\n        object.isChecked = !object.isChecked;\n        data.splice(index, 1, object);\n        return {\n          data\n        };\n      });\n      console.log(this.state.data); // this.setState({\n      //     data\n      // })\n    };\n\n    this.showFile = async e => {\n      e.preventDefault(); //get file name.\n\n      const fileName = e.target.files[0].name; // check file type.\n\n      const type = fileName.split(\".\")[1]; // read the file contents as plain text.\n\n      const reader = new FileReader();\n\n      reader.onload = async e => {\n        const text = e.target.result; // console.log(text);\n        //todo: add isChecked\n\n        if (type === \"json\") {\n          // JSON.parse() take a json string and turn it into a json object.\n          let obj = JSON.parse(text);\n          this.setState({\n            data: obj.Result\n          }); // console.log(obj); // return a object { ... }\n          // console.log(obj.Result); //return an array [{...}, {....}]\n        } else if (type === \"csv\") {\n          const lines = text.split(\"\\n\"); // console.log(lines);\n\n          let csvData = [];\n\n          for (let i = 0; i < lines.length; i++) {\n            let arr = lines[i].split(\",\");\n            csvData.push({\n              title: arr[0],\n              url: arr[1],\n              description: arr[2],\n              isChecked: false\n            });\n          }\n\n          this.setState({\n            data: csvData\n          });\n        } else {\n          const parser = new DOMParser();\n          let doc = parser.parseFromString(text, \"text/xml\");\n          const results = doc.getElementsByTagName(\"result\");\n          let xmlData = [];\n\n          for (let i = 0; i < results.length; i++) {\n            xmlData.push({\n              title: doc.getElementsByTagName(\"title\")[i].innerHTML,\n              url: doc.getElementsByTagName(\"url\")[i].innerHTML,\n              description: doc.getElementsByTagName(\"description\")[i].innerHTML,\n              isChecked: false\n            });\n          }\n\n          this.setState({\n            data: xmlData\n          });\n        }\n      };\n\n      reader.readAsText(e.target.files[0]);\n    };\n\n    this.state = {\n      data: []\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"level1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"File Upload\"), React.createElement(\"input\", {\n      className: \"btn btn-outline-light search\",\n      type: \"file\",\n      accept: \".xml,.json,.csv\",\n      onChange: this.showFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(Download, {\n      data: this.state.data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, this.state.data.map((data, i) => {\n      return React.createElement(\"div\", {\n        key: i,\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-sm-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        key: i,\n        className: \"col-sm-8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        \"data-index\": i,\n        className: \"checkbox\",\n        type: \"checkbox\",\n        name: \"check\",\n        onChange: this.checkBox,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, data.title), React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: data.url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, data.url)), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, data.description))));\n    })));\n  }\n\n}\n\nexport default FileInput;","map":{"version":3,"sources":["/Users/aimeedu/WebstormProjects/cs355reactp3/src/components/FileInput.js"],"names":["React","Download","FileInput","Component","constructor","props","delete","event","index","target","dataset","setState","state","data","splice","checkBox","object","isChecked","console","log","showFile","e","preventDefault","fileName","files","name","type","split","reader","FileReader","onload","text","result","obj","JSON","parse","Result","lines","csvData","i","length","arr","push","title","url","description","parser","DOMParser","doc","parseFromString","results","getElementsByTagName","xmlData","innerHTML","readAsText","render","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Download from \"./Download\";\nimport './Components.css';\n\nclass FileInput extends React.Component {\n    constructor(props) {\n        super(props);\n        // this.fileInput = React.createRef();\n        this.state = {\n            data: [],\n        }\n    }\n    delete = (event) => {\n        const index = event.target.dataset.index;\n        this.setState(state => {\n            const data = [...state.data]\n            data.splice(index, 1);\n            return{\n                data: data,\n            }\n        })\n    }\n    // a controlled form handles all form changes via state, which is a very React way of doing things.\n    checkBox = (event) => {\n        const index = event.target.dataset.index;\n        this.setState(state => {\n            const data = [...state.data];\n            const object = state.data[index];\n            object.isChecked = !object.isChecked;\n            data.splice(index, 1, object);\n            return {\n                data\n            }\n        })\n\n        console.log(this.state.data);\n        // this.setState({\n        //     data\n        // })\n    }\n\n    // uploadFile = (event) => {\n    //     let file = event.target.files[0];\n    //     console.log(file);\n    //\n    //     let data = new FormData();\n    //     if (file) {\n    //         // data.append sends key value pair.\n    //         data.append('file', file);\n    //         console.log(data);\n    //         // axios.post('/files', data)...\n    //     }\n    // }\n\n    showFile = async (e) => {\n        e.preventDefault();\n        //get file name.\n        const fileName = e.target.files[0].name;\n        // check file type.\n        const type = fileName.split(\".\")[1];\n        // read the file contents as plain text.\n        const reader = new FileReader();\n        reader.onload = async (e) => {\n            const text = (e.target.result);\n            // console.log(text);\n            //todo: add isChecked\n            if (type === \"json\") {\n                // JSON.parse() take a json string and turn it into a json object.\n                let obj = JSON.parse(text);\n                this.setState({\n                    data: obj.Result,\n                })\n                // console.log(obj); // return a object { ... }\n                // console.log(obj.Result); //return an array [{...}, {....}]\n            }\n            else if (type === \"csv\") {\n                const lines = text.split(\"\\n\");\n                // console.log(lines);\n                let csvData = [];\n\n                for (let i = 0; i<lines.length; i++){\n                    let arr = lines[i].split(\",\");\n                    csvData.push({\n                        title: arr[0],\n                        url: arr[1],\n                        description: arr[2],\n                        isChecked: false,\n                    });\n                }\n                this.setState({\n                    data: csvData,\n                })\n            }\n            else{\n                const parser = new DOMParser();\n                let doc = parser.parseFromString(text, \"text/xml\");\n                const results = doc.getElementsByTagName(\"result\");\n\n                let xmlData = [];\n                for (let i = 0; i<results.length; i++){\n                    xmlData.push({\n                        title: doc.getElementsByTagName(\"title\")[i].innerHTML,\n                        url: doc.getElementsByTagName(\"url\")[i].innerHTML,\n                        description: doc.getElementsByTagName(\"description\")[i].innerHTML,\n                        isChecked: false,\n                    });\n                }\n                this.setState({\n                    data: xmlData,\n                })\n            }\n        };\n        reader.readAsText(e.target.files[0])\n    }\n\n    render() {\n        return (\n            <div className=\"level1\">\n                <h2>File Upload</h2>\n                <input className=\"btn btn-outline-light search\" type=\"file\" accept=\".xml,.json,.csv\" onChange={this.showFile}/>\n                {/*passing data as a property to child class*/}\n                <Download data={this.state.data}/>\n\n                <div className=\"container\">\n                    {this.state.data.map((data, i) => {\n                        return (\n                            <div key={i} className=\"row\">\n                                <div className=\"col-sm-2\"></div>\n                                <div key={i} className=\"col-sm-8\">\n                                    <div className=\"box\">\n                                        <input data-index={i} className=\"checkbox\" type=\"checkbox\" name=\"check\" onChange={this.checkBox}/>\n                                        {/*<button className=\"btn btn-outline-primary\" data-index={i} onClick={this.delete}> Delete </button>*/}\n                                        <h3>{data.title}</h3>\n                                        <h4><a href={data.url}>{data.url}</a></h4>\n                                        <h5>{data.description}</h5>\n                                    </div>\n                                </div>\n                            </div>\n                        )})}\n                </div>\n            </div>\n\n        )\n    }\n}\n\nexport default FileInput;"]},"metadata":{},"sourceType":"module"}